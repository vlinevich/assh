#!/bin/bash
#
# AWS-aware ssh wrapper
#
# ssh to a host using ec2_tag_Name, ipaddr or instance-id:
#   - assh dev-docker1
#   - assh 172.31.1.2
#   - assh i-1234abcd
#
# ssh to multiple hosts one by one
#   - assh dev-app?
#   - assh dev-app* prod-app1 172.31.1.2 i-1234abcd 172.31.2.3
#
# pass ssh params and execute remote commands sequensionally
#   - assh dev-docker1 -- -i ~/.ssh/key.pem -l username
#   - assh dev-docker* -- 'hostname'
#
# tmux mode: open all the hosts as tmux panes
#   - assh prod-app* -t
#   - assh prod-app* -t -- 'tail -f /var/log/*-service/app.log | grep ERROR'
#
# TODO:
# fabric mode: parallel remote command execution


### Requirements
aws cli, tmux (for -t mode)


hosts_list_to_resolve=""
ssh_params=""
ip_list=""
debug=""
mode="seq"


# Parse args
while [[ $# > 0 ]]; do

    case $1 in
        "-t" )
            mode="tmux"
            ;;
        "-f" )
            mode="fabric"
            ;;
        "-d" )
            debug=1
            ;;
    esac

    # all the args without '-' are host identifiers
    if [[ $1 != "-"* ]]; then
        hosts_list_to_resolve="$hosts_list_to_resolve $1"

    # the rest after '--' are ssh params
    elif [[ $1 == '--' ]]; then
        shift
        ssh_params="$*"
        break
    fi;

    shift
done

[[ $debug ]] && echo "Mode: $mode; hosts_to_resolve:'$hosts_list_to_resolve'; ssh_params: $ssh_params"


# Resolve ipaddresses of hosts

for arg in $hosts_list_to_resolve; do

    if [[ $arg =~ ^i-[a-z0-9]{8,16} ]]; then
        [[ $debug ]] && echo "got instance id: $arg"
        result=$(aws ec2 describe-instances --instance-ids $arg | jq -r ".Reservations[] .Instances[] .PrivateIpAddress")
        [[ $result == "null" ]] && $result=""
        ip_list="$ip_list $result"

    elif [[ $arg =~ ^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}$ ]]; then
        [[ $debug ]] && echo "got ip address: $arg"
        ip_list="$ip_list $arg"

    else
        [[ $debug ]] && echo "got AWS tag Name: $arg"
        result=$(aws ec2 describe-instances --filter Name=tag:Name,Values="$arg" Name=instance-state-name,Values="running" | jq -r ".Reservations[] .Instances[] .PrivateIpAddress")
        [[ $result == "null" ]] && $result=""
        ip_list="$ip_list $result"
    fi

done

ip_list=$(echo $ip_list | tr $'\n' ' ')
[[ $debug ]] && echo "got ip_list: $ip_list"
[[ $ip_list == "" ]] && echo "Warning: no hosts matched $arg";

# Process ipaddresses
case $mode in

    "seq" )
        [[ $debug ]] && echo "sequentional mode: $ip_list"
        for ip in $ip_list; do
            echo "ssh $ip $ssh_params" >&2
            ssh $ip $ssh_params
        done
    ;;

    "tmux" )
        which tmux 1>/dev/null || { echo "Please install 'tmux' with your OS's package manager"; exit 1; }
        [[ $debug ]] && echo "tmux mode: $ip_list"

        tmux_cmd=""
        tmux_target=""
        tmux_pane_count=0

        for ip in $ip_list; do
            if [[ $tmux_pane_count == 0 ]]; then
                # sending a command to initail pane with send-keys
                tmux_cmd="$tmux_cmd tmux send-keys $tmux_target 'ssh $ip $ssh_params' 'C-m';"
            else
                # the rest panes recive commands on split-window
                tmux_cmd="$tmux_cmd tmux split-window $tmux_target ssh $ip $ssh_params;"
            fi

            # re-align tiles everytime a new tile is created,
            # to avoid problems when current tile is too small to be split.
            tmux_cmd="$tmux_cmd tmux select-layout tiled;"

            tmux_pane_count=$((tmux_pane_count+1))
        done

        tmux_cmd="$tmux_cmd tmux set-window-option synchronize-panes on;"


        if [ ! $TMUX ]; then
            # creating new tmux session in background,
            # running commands there and then attach.
            # Otherwise new session will not recieve any commands.

            tmux new-session -d -s "assh_$$"
            tmux_target="assh_$$:0"
            eval $tmux_cmd
            tmux attach-session -t "assh_$$"

        else
            # if we're already inside an active session, just executing
            eval $tmux_cmd
        fi

    ;;

    "fabric" )
        which fab 1>/dev/null || { echo "Please install 'fabric' via pip"; exit 1; }
        [[ $debug ]] && echo "fabric mode: $ip_list"
        # TODO
    ;;
esac
